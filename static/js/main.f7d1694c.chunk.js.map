{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["listOfTodo","id","description","done","App","props","state","todos","onDismiss","bind","onDone","onSwitch","updateTodos","this","map","item","setState","console","log","filter","className","onClick","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAGMA,G,MAAa,CACjB,CACEC,GAAI,EACJC,YAAa,uBACbC,MAAM,GAER,CACEF,GAAI,EACJC,YAAa,mBACbC,MAAM,GAER,CACEF,GAAI,EACJC,YAAa,gBACbC,MAAM,KAwEKC,E,YAhEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,MAAOP,GAGT,EAAKQ,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,OAAS,EAAKC,SAASF,KAAd,gBARG,E,sEAWTR,GACR,IAAMW,EAAcC,KAAKP,MAAMC,MAAMO,KAAI,SAAAC,GACvC,OAAIA,EAAKd,KAAOA,EACPc,GAEPA,EAAKZ,MAAQY,EAAKZ,KACXY,MAGXF,KAAKG,SAAS,CAACT,MAAOK,M,gCAGbX,GACTgB,QAAQC,IAAI,2BAA6BjB,GACzC,IAAMW,EAAcC,KAAKP,MAAMC,MAAMY,QAAO,SAAAJ,GAAI,OAAIA,EAAKd,KAAOA,KAChEY,KAAKG,SAAS,CAACT,MAAOK,M,+BAGb,IAAD,OACT,OACG,yBAAKQ,UAAU,OACf,4CAQAP,KAAKP,MAAMC,MAAMO,KAAI,SAAAC,GAAI,OACtB,6BACE,kCAAkBA,EA9CGZ,KAAQ,OAAS,OA8CtC,MACA,8BAAOY,EAAKb,YAAZ,KACA,8BACE,4BAAQmB,QAAS,kBAAM,EAAKV,SAASI,EAAKd,KAClCqB,KAAO,UADf,qBAKF,8BACE,4BAAQD,QAAS,kBAAM,EAAKb,UAAUO,EAAKd,KACnCqB,KAAO,UADf,qB,GArDKC,IAAMC,WCXJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f7d1694c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst listOfTodo = [\n  {\n    id: 1,\n    description: \"Buy a bottle of milk\",\n    done: true,\n  },\n  {\n    id: 2,\n    description: \"Practice english\",\n    done: false,\n  },\n  {\n    id: 3,\n    description: \"Go to the gym\",\n    done: false,\n  },\n]\n\nlet getStatus = (todo) => (todo.done) ? \"DONE\" : \"TODO\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: listOfTodo,\n    }\n\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onDone = this.onSwitch.bind(this);\n  };\n\n  onSwitch (id) {\n    const updateTodos = this.state.todos.map(item => {\n      if (item.id !== id) {\n        return item;\n      } else {\n        item.done = !item.done;\n        return item;\n      }\n    });\n    this.setState({todos: updateTodos});\n  };\n\n  onDismiss (id) {\n    console.log(\"clicked on user with id \" + id);\n    const updateTodos = this.state.todos.filter(item => item.id !== id);\n    this.setState({todos: updateTodos});\n  };\n\n  render () {\n   return (\n      <div className=\"App\">\n      <h1>My ToDo list</h1>\n      {\n      /*\n         - function() {} is equivalent to () => {}\n         - with one parameter we can remove (): item => {} is OK\n         - Finally we can remove { return ... } with ES6 and it returns what we have\n           after the arrow.\n      */\n      this.state.todos.map(item =>\n         <div>\n           <span>[{getStatus(item)}] </span>\n           <span>{item.description} </span>\n           <span>\n             <button onClick={() => this.onSwitch(item.id)}\n                     type = \"button\">\n                Done/Todo switch\n             </button>\n           </span>\n           <span>\n             <button onClick={() => this.onDismiss(item.id)}\n                     type = \"button\">\n                Dismiss\n             </button>\n           </span>\n         </div>\n       )\n     }\n     </div>\n   );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}